// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// ldcorCpp
double ldcorCpp(const arma::vec dx, const arma::vec dy, const arma::vec w);
RcppExport SEXP _GIMLET_ldcorCpp(SEXP dxSEXP, SEXP dySEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type dx(dxSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type dy(dySEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(ldcorCpp(dx, dy, w));
    return rcpp_result_gen;
END_RCPP
}
// distCpp
arma::vec distCpp(const arma::mat X, const int p);
RcppExport SEXP _GIMLET_distCpp(SEXP XSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< const int >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(distCpp(X, p));
    return rcpp_result_gen;
END_RCPP
}
// gaukerCpp
arma::vec gaukerCpp(const arma::mat X, const arma::rowvec mu, double lambda);
RcppExport SEXP _GIMLET_gaukerCpp(SEXP XSEXP, SEXP muSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(gaukerCpp(X, mu, lambda));
    return rcpp_result_gen;
END_RCPP
}
// neikerCpp
arma::vec neikerCpp(const arma::mat X, const arma::rowvec mu, int r);
RcppExport SEXP _GIMLET_neikerCpp(SEXP XSEXP, SEXP muSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< int >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(neikerCpp(X, mu, r));
    return rcpp_result_gen;
END_RCPP
}
// gimletCpp
Rcpp::List gimletCpp(const arma::mat X, const arma::mat Y, const arma::mat Z, const int r, const double delta, const int nperm);
RcppExport SEXP _GIMLET_gimletCpp(SEXP XSEXP, SEXP YSEXP, SEXP ZSEXP, SEXP rSEXP, SEXP deltaSEXP, SEXP npermSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const int >::type r(rSEXP);
    Rcpp::traits::input_parameter< const double >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const int >::type nperm(npermSEXP);
    rcpp_result_gen = Rcpp::wrap(gimletCpp(X, Y, Z, r, delta, nperm));
    return rcpp_result_gen;
END_RCPP
}
// gimletCpp2
Rcpp::List gimletCpp2(const arma::mat X, const arma::mat Y, const arma::rowvec Z, const int nperm);
RcppExport SEXP _GIMLET_gimletCpp2(SEXP XSEXP, SEXP YSEXP, SEXP ZSEXP, SEXP npermSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const int >::type nperm(npermSEXP);
    rcpp_result_gen = Rcpp::wrap(gimletCpp2(X, Y, Z, nperm));
    return rcpp_result_gen;
END_RCPP
}
// ldcorAllCpp
Rcpp::List ldcorAllCpp(const arma::mat X, const arma::mat Y, const arma::mat Z, const arma::mat M, const double delta, const int nperm);
RcppExport SEXP _GIMLET_ldcorAllCpp(SEXP XSEXP, SEXP YSEXP, SEXP ZSEXP, SEXP MSEXP, SEXP deltaSEXP, SEXP npermSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type M(MSEXP);
    Rcpp::traits::input_parameter< const double >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const int >::type nperm(npermSEXP);
    rcpp_result_gen = Rcpp::wrap(ldcorAllCpp(X, Y, Z, M, delta, nperm));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_hello_world
List rcpp_hello_world();
RcppExport SEXP _GIMLET_rcpp_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpp_hello_world());
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_GIMLET_ldcorCpp", (DL_FUNC) &_GIMLET_ldcorCpp, 3},
    {"_GIMLET_distCpp", (DL_FUNC) &_GIMLET_distCpp, 2},
    {"_GIMLET_gaukerCpp", (DL_FUNC) &_GIMLET_gaukerCpp, 3},
    {"_GIMLET_neikerCpp", (DL_FUNC) &_GIMLET_neikerCpp, 3},
    {"_GIMLET_gimletCpp", (DL_FUNC) &_GIMLET_gimletCpp, 6},
    {"_GIMLET_gimletCpp2", (DL_FUNC) &_GIMLET_gimletCpp2, 4},
    {"_GIMLET_ldcorAllCpp", (DL_FUNC) &_GIMLET_ldcorAllCpp, 6},
    {"_GIMLET_rcpp_hello_world", (DL_FUNC) &_GIMLET_rcpp_hello_world, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_GIMLET(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
