// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// ldcorCpp
double ldcorCpp(const arma::vec dx, const arma::vec dy, const arma::vec w);
RcppExport SEXP GIMLET_ldcorCpp(SEXP dxSEXP, SEXP dySEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec >::type dx(dxSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type dy(dySEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type w(wSEXP);
    __result = Rcpp::wrap(ldcorCpp(dx, dy, w));
    return __result;
END_RCPP
}
// distCpp
arma::vec distCpp(const arma::mat X, const int p);
RcppExport SEXP GIMLET_distCpp(SEXP XSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< const int >::type p(pSEXP);
    __result = Rcpp::wrap(distCpp(X, p));
    return __result;
END_RCPP
}
// gaukerCpp
arma::vec gaukerCpp(const arma::mat X, const arma::rowvec mu, double lambda);
RcppExport SEXP GIMLET_gaukerCpp(SEXP XSEXP, SEXP muSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    __result = Rcpp::wrap(gaukerCpp(X, mu, lambda));
    return __result;
END_RCPP
}
// neikerCpp
arma::vec neikerCpp(const arma::mat X, const arma::rowvec mu, int r);
RcppExport SEXP GIMLET_neikerCpp(SEXP XSEXP, SEXP muSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< int >::type r(rSEXP);
    __result = Rcpp::wrap(neikerCpp(X, mu, r));
    return __result;
END_RCPP
}
// gimletCpp
Rcpp::List gimletCpp(const arma::mat X, const arma::mat Y, const arma::mat Z, const int r, const double delta, const int bootn, const int type);
RcppExport SEXP GIMLET_gimletCpp(SEXP XSEXP, SEXP YSEXP, SEXP ZSEXP, SEXP rSEXP, SEXP deltaSEXP, SEXP bootnSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const int >::type r(rSEXP);
    Rcpp::traits::input_parameter< const double >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const int >::type bootn(bootnSEXP);
    Rcpp::traits::input_parameter< const int >::type type(typeSEXP);
    __result = Rcpp::wrap(gimletCpp(X, Y, Z, r, delta, bootn, type));
    return __result;
END_RCPP
}
// ldcorAllCpp
Rcpp::List ldcorAllCpp(const arma::mat X, const arma::mat Y, const arma::mat Z, const arma::mat M, const double delta, const int bootn, const int type);
RcppExport SEXP GIMLET_ldcorAllCpp(SEXP XSEXP, SEXP YSEXP, SEXP ZSEXP, SEXP MSEXP, SEXP deltaSEXP, SEXP bootnSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type M(MSEXP);
    Rcpp::traits::input_parameter< const double >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const int >::type bootn(bootnSEXP);
    Rcpp::traits::input_parameter< const int >::type type(typeSEXP);
    __result = Rcpp::wrap(ldcorAllCpp(X, Y, Z, M, delta, bootn, type));
    return __result;
END_RCPP
}
